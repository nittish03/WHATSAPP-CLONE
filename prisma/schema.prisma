generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?           @unique
  emailVerified     DateTime?
  hashedPassword    String?
  image             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  university        String?
  degree            String?
  branch            String?
  role              String            @default("student")
  
  accounts          Account[]
  sessions          Session[]

    createdChats     Chat[]              @relation("ChatCreator")
  chatParticipants ChatParticipant[]
  sentMessages     Message[]           @relation("SentMessages")
  readMessages     MessageRead[]
}

model NonVerifiedUser {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String @unique
  hashedPassword String
  otp            Int
  otpExpiry      DateTime
}

model VerificationToken {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String
  expires     DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}



// Add these models to your existing schema.prisma

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String?   // For group chats
  isGroup     Boolean   @default(false)
  avatar      String?   // Group avatar
  createdBy   String?   @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastMessage String?
  lastMessageAt DateTime?

  creator     User?       @relation("ChatCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  participants ChatParticipant[]
  messages    Message[]
}

model ChatParticipant {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  chatId   String @db.ObjectId
  userId   String @db.ObjectId
  joinedAt DateTime @default(now())
  role     String @default("member") // member, admin
  
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([chatId, userId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  type      String   @default("text") // text, image, file
  fileUrl   String?
  chatId    String   @db.ObjectId
  senderId  String   @db.ObjectId
  createdAt DateTime @default(now())
  edited    Boolean  @default(false)
  editedAt  DateTime?
  
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  readBy MessageRead[]
}

model MessageRead {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  readAt    DateTime @default(now())
  
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
}

